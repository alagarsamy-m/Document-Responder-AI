C[c] is a general-purpose programming language. It was created in the 1970s by Dennis Ritchie and remains widely used and influential. By design, C gives the programmer relatively direct access to the features of the typical CPU architecture; customized for the target instruction set. It has been and continues to be used to implement operating systems (especially kernels[10]), device drivers, and protocol stacks, but its use in application software has been decreasing.[11] C is used on computers that range from the largest supercomputers to the smallest microcontrollers and embedded systems.

A successor to the programming language B, C was originally developed at Bell Labs by Ritchie between 1972 and 1973 to construct utilities running on Unix. It was applied to re-implementing the kernel of the Unix operating system.[12] During the 1980s, C gradually gained popularity. It has become one of the most widely used programming languages,[13][14] with C compilers available for practically all modern computer architectures and operating systems. The book The C Programming Language, co-authored by the original language designer, served for many years as the de facto standard for the language.[15][1] C has been standardized since 1989 by the American National Standards Institute (ANSI) and, subsequently, jointly by the International Organization for Standardization (ISO) and the International Electrotechnical Commission (IEC).

C is an imperative procedural language, supporting structured programming, lexical variable scope, and recursion, with a static type system. It was designed to be compiled to provide low-level access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant C program written with portability in mind can be compiled for a wide variety of computer platforms and operating systems with few changes to its source code.

Although neither C nor its standard library provide some popular features found in other languages, it is flexible enough to support them. For example, object orientation and garbage collection are provided by external libraries GLib Object System and Boehm garbage collector, respectively.

Since 2000, C has consistently ranked among the top four languages in the TIOBE index, a measure of the popularity of programming languages.[16] Originally, C was popular mostly due to being easier to use than other programming languages.[citation needed] Currently, C is popular mostly due to speed, efficiency, low memory usage, and simplicity.[citation needed] C uses approximately 80 times less energy than Python, Perl, and PHP. [17] On average, C uses less energy than Fortran, despite Fortran being faster on average.[citation needed]

Characteristics
---------------

The C language exhibits the following characteristics:

Free-form source code
Semicolons terminate statements
Curly braces group statements into blocks
Executable code is contained in functions; no script-like syntax
Parameters are passed by value; pass by-reference is achieved by passing a pointer to a value
Relatively small number of keywords
Control flow constructs, including if, for, do, while, and switch
Arithmetic, bitwise, and logic operators, including +,+=,++,&,||, etc.
Multiple assignments may be performed in a single statement
User-defined identifiers are not distinguished from keywords; i.e. by a sigil
A variable declared inside a block is accessible only in that block and only below the declaration
A function return value can be ignored
A function cannot be nested inside a function; but some translators support this
Function pointers support run-time polymorphism
Supports recursion; a function may call itself
Data typing is static, but weakly enforced; all variables have a type, but implicit conversion between primitive types weakens the separation of the different types
User-defined data types allow for aliasing a data type specifier
Syntax for array definition and access is via square bracket notation, for example month[11]. Indexing is defined in terms of pointer arithmetic. Whole arrays cannot be copied or compared without custom or library code
User-defined structure types allow related data elements to be passed and copied as a unit although two structures cannot be compared without custom code to compare each field
User-defined union types support overlapping members; allowing multiple data types to share the same memory location
User-defined enumeration types support aliasing integer values
Lacks a string type but has syntax for null-terminated strings with associated handling in its standard library
Supports low-level access to computer memory via pointers
Supports procedure-like construct as a function returning void
Supports dynamic memory via standard library functions
Includes the C preprocessor to perform macro definition, source code file inclusion, and conditional compilation
Supports modularity in that files are processed separately, with visibility control via static and extern attributes
Minimized functionality in the core language while relatively complex functionality such as I/O, string manipulation, and mathematical functions supported via standard library functions
Resulting compiled code has relatively straightforward needs on the underlying platform; making it desirable for operating and embedded systems


"Hello, world" example
----------------------

The "Hello, World!" program example that appeared in the first edition of K&R has become the model for an introductory program in most programming textbooks. The program prints "hello, world" to the standard output.

The original version was:[18]

main()
{
    printf("hello, world\n");
}
A more modern version is:[d]

#include <stdio.h>

int main(void)
{
    printf("hello, world\n");
}
The first line is a preprocessor directive, indicated by #include, which causes the preprocessor to replace that line of code with the text of the stdio.h header file, which contains declarations for input and output functions including printf. The angle brackets around stdio.h indicate that the header file can be located using a search strategy that selects header files provided with the compiler over files with the same name that may be found in project-specific directories.

The next code line declares the entry point function main(). The run-time environment calls this function to begin program execution. The type specifier int indicates that the function returns an integer value. The void parameter list indicates that the function consumes no arguments. The run-time environment actually passes two arguments (typed int and char *[]), but this implementation ignores them. The ISO C standard (section 5.1.2.2.1) requires syntax that either is void or these two arguments â€“ a special treatment not afforded to other functions.

The opening curly brace indicates the beginning of the code that defines the function.

The next line of code calls (diverts execution to) the C standard library function printf with the address of the first character of a null-terminated string specified as a string literal. The text \n is an escape sequence that denotes the newline character which when output in a terminal results in moving the cursor to the beginning of the next line. Even though printf returns an int value, it is silently discarded. The semicolon ; terminates the call statement.

The closing curly brace indicates the end of the main function. Prior to C99, an explicit return 0; statement was required at the end of main function, but since C99, the main function (as being the initial function call) implicitly returns 0 upon reaching its final closing curly brace.[e]

